import asyncio
import json
import os
import threading
import webbrowser
from tkinter import Tk, Entry, Button, Listbox, messagebox, Label, StringVar, OptionMenu, filedialog
from tkinter.colorchooser import askcolor
from flask import Flask, request
from twitchio.ext import commands
import requests

# Configuration
CLIENT_ID = ''
CLIENT_SECRET = ''
REDIRECT_URI = 'http://localhost:3000'
SUSPICIOUS_WORDS_FILE = os.path.join(os.getcwd(), "suspicious_words.json")
USER_DATA_FILE = os.path.join(os.getcwd(), "user_data.json")
SETTINGS_FILE = os.path.join(os.getcwd(), "settings.json")
LAYOUT_FILE = os.path.join(os.getcwd(), "layout.json")
JSON_DIR = os.path.join(os.getcwd(), "chat_data")
os.makedirs(JSON_DIR, exist_ok=True)

# Shared Data and Locks
SUSPICIOUS_WORDS = []
word_usage_count = {}
lock = threading.Lock()

# Suspicious threshold
threshold = 1000  # Default threshold value, now dynamic

# Load Suspicious Words
if os.path.exists(SUSPICIOUS_WORDS_FILE):
    with open(SUSPICIOUS_WORDS_FILE, 'r') as f:
        SUSPICIOUS_WORDS = json.load(f)
        word_usage_count = {word: 0 for word in SUSPICIOUS_WORDS}

# Flask App for OAuth
app = Flask(__name__)

def save_user_data(token, channel):
    user_data = {}
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r') as f:
            user_data = json.load(f)
    user_data[channel] = {'token': token}
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(user_data, f, indent=4)

def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_settings(ui_color, text_color, button_color, threshold):
    settings = {
        "ui_color": ui_color,
        "text_color": text_color,
        "button_color": button_color,
        "threshold": threshold
    }
    with open(SETTINGS_FILE, 'w') as f:
        json.dump(settings, f, indent=4)

def load_settings():
    default_settings = {
        "ui_color": "white",
        "text_color": "black",
        "button_color": "lightgrey",
        "threshold": 1000
    }
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, 'r') as f:
                settings = json.load(f)
            for key, value in default_settings.items():
                if key not in settings or not isinstance(settings[key], type(value)):
                    settings[key] = value
            return settings
        except (json.JSONDecodeError, IOError):
            messagebox.showerror("Error", "Settings file is corrupted. Using default settings.")
    return default_settings

def save_layout(layout):
    with open(LAYOUT_FILE, 'w') as f:
        json.dump(layout, f, indent=4)

def load_layout():
    if os.path.exists(LAYOUT_FILE):
        try:
            with open(LAYOUT_FILE, 'r') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            messagebox.showerror("Error", "Layout file is corrupted. Using default layout.")
    return {}

def get_oauth_url():
    scope = 'chat:read chat:edit'
    return f"https://id.twitch.tv/oauth2/authorize?response_type=code&client_id={CLIENT_ID}&redirect_uri={REDIRECT_URI}&scope={scope}"

def exchange_code_for_token(code):
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'code': code,
        'grant_type': 'authorization_code',
        'redirect_uri': REDIRECT_URI
    }
    response = requests.post(url, data=params)
    if response.status_code == 200:
        return response.json().get('access_token')
    return None

def validate_token(token):
    url = "https://id.twitch.tv/oauth2/validate"
    headers = {"Authorization": f"OAuth {token}"}
    response = requests.get(url, headers=headers)
    return response.status_code == 200

@app.route('/')
def handle_redirect():
    code = request.args.get('code')
    if code:
        token = exchange_code_for_token(code)
        if token:
            return f"""
            <form action="/setup" method="post">
                <label for="channel">Enter your Twitch channel name:</label><br>
                <input type="text" id="channel" name="channel"><br>
                <input type="hidden" name="token" value="{token}">
                <input type="submit" value="Submit">
            </form>
            """
    return "Authorization failed."

@app.route('/setup', methods=['POST'])
def setup_channel():
    token = request.form.get('token')
    channel = request.form.get('channel')
    if token and channel:
        save_user_data(token, channel)
        start_bot(token, channel)
        return "Sus Tracker is now live in your channel!"
    return "Failed to set up your bot."

def start_flask():
    app.run(port=3000)

# Twitch Bot
def start_bot(token, channel):
    class ChatBot(commands.Bot):
        def __init__(self, token, channel):
            super().__init__(token=token, prefix='!', initial_channels=[channel])

        async def event_ready(self):
            print(f"Logged in as {self.nick}. Connected to {channel}.")

        async def event_message(self, message):
            with lock:
                for word in SUSPICIOUS_WORDS:
                    if word in message.content.lower():
                        word_usage_count[word] += 1
            await self.handle_commands(message)

    async def run_bot():
        bot = ChatBot(token=token, channel=channel)
        await bot.start()

    threading.Thread(target=asyncio.run, args=(run_bot(),), daemon=True).start()

# Tkinter UI with Dynamic Color Settings and Drag-and-Drop
def create_ui():
    global threshold

    settings = load_settings()
    layout = load_layout()
    threshold = settings["threshold"]

    user_data = load_user_data()
    for channel, data in user_data.items():
        token = data.get("token")
        if token and validate_token(token):
            start_bot(token, channel)

    def update_listbox():
        listbox.delete(0, "end")
        with lock:
            for word in SUSPICIOUS_WORDS:
                listbox.insert("end", word)

    def add_word():
        new_word = word_entry.get().strip()
        if new_word and new_word not in SUSPICIOUS_WORDS:
            with lock:
                SUSPICIOUS_WORDS.append(new_word)
                word_usage_count[new_word] = 0
            save_suspicious_words()
            update_listbox()
            word_entry.delete(0, "end")
        else:
            messagebox.showinfo("Error", "Word already exists or is invalid.")

    def delete_word():
        selected = listbox.curselection()
        if selected:
            word = listbox.get(selected[0])
            with lock:
                SUSPICIOUS_WORDS.remove(word)
                del word_usage_count[word]
            save_suspicious_words()
            update_listbox()
        else:
            messagebox.showinfo("Error", "No word selected.")

    def rate_chat():
        with lock:
            if not SUSPICIOUS_WORDS:
                messagebox.showinfo("Sus Level", "No suspicious words loaded.")
                return

            word_percentages = [
                min((word_usage_count[word] / threshold) * 100, 100)
                for word in SUSPICIOUS_WORDS
            ]

            avg_sus_level = sum(word_percentages) / len(SUSPICIOUS_WORDS)

            word_details = "\n".join(
                f"{word}: {count} time(s)"
                for word, count in word_usage_count.items() if count > 0
            )

        messagebox.showinfo(
            "Sus Level",
            f"Sus level: {round(avg_sus_level, 2)}%\n\nWords used:\n{word_details}"
        )

    def reset_chat():
        with lock:
            for word in SUSPICIOUS_WORDS:
                word_usage_count[word] = 0
        messagebox.showinfo("Reset Sus Level", "Sus level has been reset.")

    def update_threshold():
        global threshold
        try:
            new_threshold = int(threshold_entry.get().strip())
            if new_threshold > 0:
                threshold = new_threshold
                save_settings(color_var.get(), text_color_var.get(), button_color_var.get(), threshold)
                messagebox.showinfo("Threshold Update", f"Threshold updated to {threshold}.")
            else:
                messagebox.showerror("Invalid Input", "Threshold must be a positive integer.")
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter a valid integer for the threshold.")

    def start_login():
        webbrowser.open(get_oauth_url())

    def save_suspicious_words():
        with open(SUSPICIOUS_WORDS_FILE, 'w') as f:
            json.dump(SUSPICIOUS_WORDS, f, indent=4)

    def update_colors(*args):
        color = color_var.get()
        button_color = button_color_var.get()
        window.configure(bg=color)
        for widget in widgets:
            if hasattr(widget, 'configure'):
                widget.configure(bg=color, fg=text_color_var.get())
        for button in buttons:
            if hasattr(button, 'configure'):
                button.configure(bg=button_color, fg=text_color_var.get())
        save_settings(color, text_color_var.get(), button_color, threshold)

    def select_color(var):
        color = askcolor()[1]
        if color:
            var.set(color)

    def on_close():
        layout = {
            widget_names[widget]: {'x': widget.winfo_x(), 'y': widget.winfo_y()}
            for widget in draggable_widgets
        }
        save_layout(layout)
        window.destroy()

    def start_drag(event):
        widget = event.widget
        widget.start_x = event.x
        widget.start_y = event.y

    def do_drag(event):
        widget = event.widget
        x = widget.winfo_x() - widget.start_x + event.x
        y = widget.winfo_y() - widget.start_y + event.y
        widget.place(x=x, y=y)

    window = Tk()
    window.title("Sus Tracker - Manage Suspicious Words")
    window.geometry("800x600")
    window.protocol("WM_DELETE_WINDOW", on_close)

    color_var = StringVar(value=settings["ui_color"])
    text_color_var = StringVar(value=settings["text_color"])
    button_color_var = StringVar(value=settings["button_color"])

    color_var.trace_add("write", update_colors)
    text_color_var.trace_add("write", update_colors)
    button_color_var.trace_add("write", update_colors)

    widgets = []
    buttons = []
    draggable_widgets = []
    widget_names = {}

    def add_draggable_widget(widget, name):
        widget_names[widget] = name
        draggable_widgets.append(widget)
        widget.bind("<Button-1>", start_drag)
        widget.bind("<B1-Motion>", do_drag)

    word_entry = Entry(window, width=30)
    word_entry.place(x=50, y=50)
    widgets.append(word_entry)
    add_draggable_widget(word_entry, "word_entry")

    add_word_button = Button(window, text="Add Word", command=add_word)
    add_word_button.place(x=300, y=50)
    buttons.append(add_word_button)
    add_draggable_widget(add_word_button, "add_word_button")

    listbox = Listbox(window, width=40, height=10)
    listbox.place(x=50, y=100)
    widgets.append(listbox)
    add_draggable_widget(listbox, "listbox")

    delete_word_button = Button(window, text="Delete Word", command=delete_word)
    delete_word_button.place(x=300, y=100)
    buttons.append(delete_word_button)
    add_draggable_widget(delete_word_button, "delete_word_button")

    rate_chat_button = Button(window, text="Rate Chat", command=rate_chat)
    rate_chat_button.place(x=50, y=250)
    buttons.append(rate_chat_button)
    add_draggable_widget(rate_chat_button, "rate_chat_button")

    reset_chat_button = Button(window, text="Reset Chat", command=reset_chat)
    reset_chat_button.place(x=300, y=250)
    buttons.append(reset_chat_button)
    add_draggable_widget(reset_chat_button, "reset_chat_button")

    login_button = Button(window, text="Log in with Twitch", command=start_login)
    login_button.place(x=50, y=350)
    buttons.append(login_button)
    add_draggable_widget(login_button, "login_button")

    threshold_label = Label(window, text="Threshold:")
    threshold_label.place(x=50, y=450)
    widgets.append(threshold_label)
    add_draggable_widget(threshold_label, "threshold_label")

    threshold_entry = Entry(window, width=10)
    threshold_entry.insert(0, str(threshold))
    threshold_entry.place(x=150, y=450)
    widgets.append(threshold_entry)
    add_draggable_widget(threshold_entry, "threshold_entry")

    update_threshold_button = Button(window, text="Update Threshold", command=update_threshold)
    update_threshold_button.place(x=300, y=450)
    buttons.append(update_threshold_button)
    add_draggable_widget(update_threshold_button, "update_threshold_button")

    change_ui_color_button = Button(window, text="Change UI Color", command=lambda: select_color(color_var))
    change_ui_color_button.place(x=50, y=500)
    buttons.append(change_ui_color_button)
    add_draggable_widget(change_ui_color_button, "change_ui_color_button")

    change_text_color_button = Button(window, text="Change Text Color", command=lambda: select_color(text_color_var))
    change_text_color_button.place(x=200, y=500)
    buttons.append(change_text_color_button)
    add_draggable_widget(change_text_color_button, "change_text_color_button")

    change_button_color_button = Button(window, text="Change Button Color", command=lambda: select_color(button_color_var))
    change_button_color_button.place(x=350, y=500)
    buttons.append(change_button_color_button)
    add_draggable_widget(change_button_color_button, "change_button_color_button")

    for widget, name in widget_names.items():
        if name in layout:
            widget.place(x=layout[name]['x'], y=layout[name]['y'])

    update_listbox()
    update_colors()

    window.mainloop()

if __name__ == "__main__":
    threading.Thread(target=start_flask, daemon=True).start()
    create_ui()


if __name__ == "__main__":
    threading.Thread(target=start_flask, daemon=True).start()
    create_ui()

