import asyncio
import json
import os
import threading
import webbrowser
from tkinter import Tk, Entry, Button, Listbox, messagebox, Label, StringVar, OptionMenu, Frame
from flask import Flask, request
from twitchio.ext import commands
import requests

# Configuration
CLIENT_ID = ''
CLIENT_SECRET = ''
REDIRECT_URI = 'http://localhost:3000'
SUSPICIOUS_WORDS_FILE = os.path.join(os.getcwd(), "suspicious_words.json")
USER_DATA_FILE = os.path.join(os.getcwd(), "user_data.json")
SETTINGS_FILE = os.path.join(os.getcwd(), "settings.json")
JSON_DIR = os.path.join(os.getcwd(), "chat_data")
os.makedirs(JSON_DIR, exist_ok=True)

# Shared Data and Locks
SUSPICIOUS_WORDS = []
word_usage_count = {}
lock = threading.Lock()

# Suspicious threshold
threshold = 1000  # Default threshold value, now dynamic

# Load Suspicious Words
if os.path.exists(SUSPICIOUS_WORDS_FILE):
    with open(SUSPICIOUS_WORDS_FILE, 'r') as f:
        SUSPICIOUS_WORDS = json.load(f)
        word_usage_count = {word: 0 for word in SUSPICIOUS_WORDS}

# Flask App for OAuth
app = Flask(__name__)

def save_user_data(token, channel):
    user_data = {}
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r') as f:
            user_data = json.load(f)
    user_data[channel] = {'token': token}
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(user_data, f, indent=4)

def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_settings(ui_color, text_color, button_color, threshold):
    settings = {
        "ui_color": ui_color,
        "text_color": text_color,
        "button_color": button_color,
        "threshold": threshold
    }
    with open(SETTINGS_FILE, 'w') as f:
        json.dump(settings, f, indent=4)

def load_settings():
    default_settings = {
        "ui_color": "white",
        "text_color": "black",
        "button_color": "lightgrey",
        "threshold": 1000
    }
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, 'r') as f:
                settings = json.load(f)
            for key, value in default_settings.items():
                if key not in settings or not isinstance(settings[key], type(value)):
                    settings[key] = value
            return settings
        except (json.JSONDecodeError, IOError):
            messagebox.showerror("Error", "Settings file is corrupted. Using default settings.")
    return default_settings

def get_oauth_url():
    scope = 'chat:read chat:edit'
    return f"https://id.twitch.tv/oauth2/authorize?response_type=code&client_id={CLIENT_ID}&redirect_uri={REDIRECT_URI}&scope={scope}"

def exchange_code_for_token(code):
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'code': code,
        'grant_type': 'authorization_code',
        'redirect_uri': REDIRECT_URI
    }
    response = requests.post(url, data=params)
    if response.status_code == 200:
        return response.json().get('access_token')
    return None

def validate_token(token):
    url = "https://id.twitch.tv/oauth2/validate"
    headers = {"Authorization": f"OAuth {token}"}
    response = requests.get(url, headers=headers)
    return response.status_code == 200

@app.route('/')
def handle_redirect():
    code = request.args.get('code')
    if code:
        token = exchange_code_for_token(code)
        if token:
            return f"""
            <form action="/setup" method="post">
                <label for="channel">Enter your Twitch channel name:</label><br>
                <input type="text" id="channel" name="channel"><br>
                <input type="hidden" name="token" value="{token}">
                <input type="submit" value="Submit">
            </form>
            """
    return "Authorization failed."

@app.route('/setup', methods=['POST'])
def setup_channel():
    token = request.form.get('token')
    channel = request.form.get('channel')
    if token and channel:
        save_user_data(token, channel)
        start_bot(token, channel)
        return "Sus Tracker is now live in your channel!"
    return "Failed to set up your bot."

def start_flask():
    app.run(port=3000)

# Twitch Bot
def start_bot(token, channel):
    class ChatBot(commands.Bot):
        def __init__(self, token, channel):
            super().__init__(token=token, prefix='!', initial_channels=[channel])

        async def event_ready(self):
            print(f"Logged in as {self.nick}. Connected to {channel}.")

        async def event_message(self, message):
            with lock:
                for word in SUSPICIOUS_WORDS:
                    if word in message.content.lower():
                        word_usage_count[word] += 1
            await self.handle_commands(message)

    async def run_bot():
        bot = ChatBot(token=token, channel=channel)
        await bot.start()

    threading.Thread(target=asyncio.run, args=(run_bot(),), daemon=True).start()

# Tkinter UI
def create_ui():
    global threshold  # Declare threshold as global

    settings = load_settings()
    threshold = settings["threshold"]

    user_data = load_user_data()
    for channel, data in user_data.items():
        token = data.get("token")
        if token and validate_token(token):
            start_bot(token, channel)

    def update_listbox():
        """Update the listbox to reflect the current suspicious words."""
        listbox.delete(0, "end")
        with lock:
            for word in SUSPICIOUS_WORDS:
                listbox.insert("end", word)

    def add_word():
        """Add a new word to the suspicious words list."""
        new_word = word_entry.get().strip()
        if new_word and new_word not in SUSPICIOUS_WORDS:
            with lock:
                SUSPICIOUS_WORDS.append(new_word)
                word_usage_count[new_word] = 0
            save_suspicious_words()
            update_listbox()
            word_entry.delete(0, "end")
        else:
            messagebox.showinfo("Error", "Word already exists or is invalid.")

    def delete_word():
        """Delete the selected word from the suspicious words list."""
        selected = listbox.curselection()
        if selected:
            word = listbox.get(selected[0])
            with lock:
                SUSPICIOUS_WORDS.remove(word)
                del word_usage_count[word]
            save_suspicious_words()
            update_listbox()
        else:
            messagebox.showinfo("Error", "No word selected.")

    def rate_chat():
        """Rate the chat based on suspicious words usage."""
        with lock:
            if not SUSPICIOUS_WORDS:
                messagebox.showinfo("Sus Level", "No suspicious words loaded.")
                return

            word_percentages = [
                min((word_usage_count[word] / threshold) * 100, 100)
                for word in SUSPICIOUS_WORDS
            ]

            avg_sus_level = sum(word_percentages) / len(SUSPICIOUS_WORDS)

            word_details = "\n".join(
                f"{word}: {count} time(s)"
                for word, count in word_usage_count.items() if count > 0
            )

        messagebox.showinfo(
            "Sus Level",
            f"Sus level: {round(avg_sus_level, 2)}%\n\nWords used:\n{word_details}"
        )

    def reset_chat():
        """Reset the suspicious level counters."""
        with lock:
            for word in SUSPICIOUS_WORDS:
                word_usage_count[word] = 0
        messagebox.showinfo("Reset Sus Level", "Sus level has been reset.")

    def update_threshold():
        """Update the suspicious words threshold."""
        global threshold
        try:
            new_threshold = int(threshold_entry.get().strip())
            if new_threshold > 0:
                threshold = new_threshold
                save_settings(color_var.get(), text_color_var.get(), button_color_var.get(), threshold)
                messagebox.showinfo("Threshold Update", f"Threshold updated to {threshold}.")
            else:
                messagebox.showerror("Invalid Input", "Threshold must be a positive integer.")
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter a valid integer for the threshold.")

    def start_login():
        """Open the Twitch login URL."""
        webbrowser.open(get_oauth_url())

    def save_suspicious_words():
        """Save suspicious words to the file."""
        with open(SUSPICIOUS_WORDS_FILE, 'w') as f:
            json.dump(SUSPICIOUS_WORDS, f, indent=4)

    def update_colors():
        """Update the colors of the UI elements."""
        color = color_var.get()
        button_color = button_color_var.get()
        window.configure(bg=color)
        for widget in widgets:
            widget.configure(bg=color, fg=text_color_var.get())
        for button in buttons:
            button.configure(bg=button_color)
        save_settings(color, text_color_var.get(), button_color, threshold)

    def upload_settings():
        """Upload the current settings for sharing or backup."""
        try:
            with open(SETTINGS_FILE, 'r') as f:
                settings = json.load(f)
            upload_path = os.path.join(os.getcwd(), "uploaded_settings.json")
            with open(upload_path, 'w') as uf:
                json.dump(settings, uf, indent=4)
            messagebox.showinfo("Upload Settings", f"Settings successfully uploaded to {upload_path}.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to upload settings: {e}")

    # Main UI Window
    window = Tk()
    window.title("Sus Tracker - Manage Suspicious Words")

    color_var = StringVar(value=settings["ui_color"])
    text_color_var = StringVar(value=settings["text_color"])
    button_color_var = StringVar(value=settings["button_color"])

    color_label = Label(window, text="UI Color:")
    color_label.grid(row=0, column=2, padx=10, pady=5)

    color_options = ["white", "lightblue", "lightgreen", "lightyellow", "pink", "grey", "purple",]
    color_menu = OptionMenu(window, color_var, *color_options, command=lambda _: update_colors())
    color_menu.grid(row=0, column=3, padx=10, pady=5)

    text_color_label = Label(window, text="Text Color:")
    text_color_label.grid(row=1, column=2, padx=10, pady=5)

    text_color_menu = OptionMenu(window, text_color_var, *["black", "blue", "green", "red"], command=lambda _: update_colors())
    text_color_menu.grid(row=1, column=3, padx=10, pady=5)

    button_color_label = Label(window, text="Button Color:")
    button_color_label.grid(row=2, column=2, padx=10, pady=5)

    button_color_menu = OptionMenu(window, button_color_var, *["lightgrey", "white", "blue", "green", "red", "purple",], command=lambda _: update_colors())
    button_color_menu.grid(row=2, column=3, padx=10, pady=5)

    widgets = []  # Track all widgets for color updates
    buttons = []  # Track all buttons for color updates

    word_entry = Entry(window, width=30)
    word_entry.grid(row=0, column=0, padx=10, pady=10)
    widgets.append(word_entry)

    add_word_button = Button(window, text="Add Word", command=add_word)
    add_word_button.grid(row=0, column=1, padx=10, pady=10)
    buttons.append(add_word_button)

    listbox = Listbox(window, width=40, height=10)
    listbox.grid(row=1, column=0, padx=10, pady=10)
    widgets.append(listbox)

    delete_word_button = Button(window, text="Delete Word", command=delete_word)
    delete_word_button.grid(row=1, column=1, padx=10, pady=10)
    buttons.append(delete_word_button)

    rate_chat_button = Button(window, text="Rate Chat", command=rate_chat)
    rate_chat_button.grid(row=3, column=0, padx=10, pady=10)
    buttons.append(rate_chat_button)

    reset_chat_button = Button(window, text="Reset Sus Level", command=reset_chat)
    reset_chat_button.grid(row=3, column=1, padx=10, pady=10)
    buttons.append(reset_chat_button)

    login_button = Button(window, text="Log in with Twitch", command=start_login)
    login_button.grid(row=3, column=2, padx=10, pady=10)
    buttons.append(login_button)

    upload_settings_button = Button(window, text="Upload Settings", command=upload_settings)
    upload_settings_button.grid(row=3, column=3, padx=10, pady=10)
    buttons.append(upload_settings_button)

    threshold_label = Label(window, text="Threshold:")
    threshold_label.grid(row=2, column=0, padx=10, pady=5)
    widgets.append(threshold_label)

    threshold_entry = Entry(window, width=10)
    threshold_entry.insert(0, str(threshold))
    threshold_entry.grid(row=2, column=1, padx=10, pady=5)
    widgets.append(threshold_entry)

    update_threshold_button = Button(window, text="Update Threshold", command=update_threshold)
    update_threshold_button.grid(row=2, column=2, padx=10, pady=5)
    buttons.append(update_threshold_button)

    update_listbox()  # Initialize the listbox with the current words

    update_colors()  # Apply saved settings initially

    window.mainloop()

if __name__ == "__main__":
    threading.Thread(target=start_flask, daemon=True).start()
    create_ui()

